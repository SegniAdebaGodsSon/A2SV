class Solution {
    public boolean isBipartite(int[][] graph) {
        // 0(not met), 1(set one), 2(set two)
        int[] visited = new int[graph.length];

        for (int i = 0; i < graph.length; i++) {
            if (graph[i].length != 0 && visited[i] == 0) {
                visited[i] = 1;
                ArrayDeque<Integer> q = new ArrayDeque<>();
                q.add(i);
                while(! q.isEmpty()) {
                    int current = q.poll();
                    for (int c: graph[current]) {

                        if (visited[c] == 0) {
                            visited[c] = (visited[current] == 1) ? 2 : 1;
                            q.add(c);
                        } else {
                            if (visited[c] == visited[current]) return false;
                        }
                    }
                }

            }
        }

        return true;
    }
}